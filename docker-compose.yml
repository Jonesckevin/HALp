
services:
    bookstack:
        image: lscr.io/linuxserver/mariadb
        volumes:
            - '${DOCPATH}/planka/db-data:/var/lib/postgresql/data'
        environment:
            - MYSQL_DATABASE=bookstackapp
            - MYSQL_USER=bookstack
            - MYSQL_PASSWORD=bookstackpassword
            - TZ=America/Toronto
            - MYSQL_ROOT_PASSWORD=bookstackrootpassword
            - PGID=1000
            - PUID=1000
        restart: '${DOCKERSTART}'
        hostname: bookstack-db
        container_name: BookStack-DB

    linuxserver:
        image: 'lscr.io/linuxserver/bookstack:latest'
        environment:
            - DB_DATABASE=bookstackapp
            - DB_PASS=bookstackpassword
            - DB_USER=bookstack
            - 'APP_URL=http://'
            - DB_HOST=BookStack-DB
            - DB_PORT=3306
            - PGID=1000
            - PUID=1000
        volumes:
            - '${DOCPATH}/bookstack/public:/var/www/bookstack/public:rw'
            - '${DOCPATH}/bookstack/app_data:/config'
        ports:
            - '$BOOKSTACKPORT:80'
        restart: '${DOCKERSTART}'
        hostname: bookstack
        container_name: BookStack

    planka:
        command: '-e POSTGRES_DB=planka -e POSTGRES_HOST_AUTH_METHOD=trust postgres:14-alpine'
        image: postgres:14-alpine
        volumes:
            - '${DOCPATH}'
        restart: '${DOCKERSTART}'
        hostname: planka-db
        container_name: Planka-DB

    plankanban:
        image: 'ghcr.io/plankanban/planka:latest'
        volumes:
            - '${DOCPATH}/planka/attachments:/app/private/attachments'
            - '${DOCPATH}/planka/project-background-images:/app/public/project-background-images'
            - '${DOCPATH}/planka/user-avatars:/app/public/user-avatars'
        environment:
            - DEFAULT_ADMIN_USERNAME=admin
            - DEFAULT_ADMIN_NAME=Admin
            - 'DEFAULT_ADMIN_PASSWORD=${ACTPASSWORD}'
            - 'DEFAULT_ADMIN_EMAIL=${LOGINUSER}@planka.local'
            - SECRET_KEY=secretofkeys
            - 'DATABASE_URL=postgresql://postgres@Planka-DB/planka'
            - 'BASE_URL=http://'
        ports:
            - '$PLANKAPORT:1337'
        restart: '${DOCKERSTART}'
        hostname: planka
        container_name: Planka

    portainer-ce:
        image: 'portainer/portainer-ce:latest'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
        ports:
            - '0.0.0.0:$PORTAINERPORT:9000'
        restart: '${DOCKERSTART}'
        hostname: portainer
        container_name: Portainer

    homer:
        image: 'b4bz/homer:latest'
        environment:
            - INIT_ASSETS=1
        volumes:
            - '${DOCPATH}/homer/tools:/www/assets/tools:rw'
            - '${DOCPATH}/homer:/www/assets:rw'
        user: '0:0'
        ports:
            - '$HOMERPORT:8080'
        restart: '${DOCKERSTART}'
        hostname: homer
        container_name: Homer

    vaultwarden:
        command: 'openssl req -nodes -x509 -newkey rsa:4096 -keyout /ssl/bitwarden.key -out /ssl/bitwarden.crt -days 365 -subj "/C=CA/ST=Ontario/L=Ottawa/O=TF/CN=bitwarden.local"'
        image: 'vaultwarden/server:latest'
        volumes:
            - '${DOCPATH}/vaultwarden/ssl:/ssl/:rw'
            - '${DOCPATH}/vaultwarden/data:/data/'
        ports:
            - '$VAULTPORT:80'
        environment:
            - ROCKET_TLS='{certs="/ssl/bitwarden.crt",key="/ssl/bitwarden.key"}'
            - WEBSOCKET_ENABLED=false
            - ADMIN_TOKEN=$ARGONIDS
            - DISABLE_ADMIN_TOKEN=false
            - INVITATIONS_ALLOWED=true
            - SIGNUPS_ALLOWED=true
        restart: '${DOCKERSTART}'
        hostname: vaultwarden
        container_name: VaultWarden

    paperless-redis:
        image: 'docker.io/library/redis:7'
        volumes:
            - '${DOCPATH}/paperless/redisdata:/data'
        restart: '${DOCKERSTART}'
        hostname: paperless-redis
        container_name: Paperless-Redis

    paperless-db:
        image: 'docker.io/library/postgres:16'
        environment:
            - POSTGRES_PASSWORD=paperless
            - POSTGRES_USER=paperless
            - POSTGRES_DB=paperless
        volumes:
            - '${DOCPATH}/paperless/pgdata:/var/lib/postgresql/data'
        restart: '${DOCKERSTART}'
        hostname: paperless-db
        container_name: Paperless-DB

    paperless-ngx:
        image: 'ghcr.io/paperless-ngx/paperless-ngx:latest'
        environment:
            - PAPERLESS_REDIS=redis://Paperless-Redis:6379
            - PAPERLESS_DBHOST=Paperless-DB
            - PAPERLESS_OCR_LANGUAGE=eng
            - USERMAP_UID=1000
            - USERMAP_GID=1000
            - PAPERLESS_OCR_LANGUAGES=fra
        volumes:
            - '${DOCPATH}/paperless/data:/usr/src/paperless/data'
            - '${DOCPATH}/paperless/media:/usr/src/paperless/media'
            - '${DOCPATH}/paperless/export:/usr/src/paperless/export'
            - '${DOCPATH}/paperless/consume:/usr/src/paperless/consume'
        ports:
            - '$PAPERLESSPORT:8000'
        restart: '${DOCKERSTART}'
        hostname: paperless-ngx
        container_name: Paperless-NGX

    ollama-llm:
        image: 'ollama/ollama:latest'
        volumes:
            - '${DOCPATH}/ollama:/root/.ollama'
        restart: '${DOCKERSTART}'
        hostname: ollama-llm
        container_name: Ollama-LLM

    ollama-webui:
        image: 'ghcr.io/open-webui/open-webui:main'
        environment:
            - OLLAMA_BASE_URL=http://"$HOSTIP":11434
        ports:
            - '$OLLAMAPORT:8080'
        restart: '${DOCKERSTART}'
        hostname: ollama-webui
        container_name: OpenWebUI

    ollama-ocr:
        build:
            context: '${DOCPATH}/OCR/'
        volumes:
            - '${DOCPATH}/OCR/html:/var/www/html'
        ports:
            - '$OCRPORT:5000'
        restart: '${DOCKERSTART}'
        hostname: ollama-ocr
        container_name: Ollama-OCR

    drawio:
        image: 'jgraph/drawio:latest'
        ports:
            - '$DRAWIOPORT:8080'
        restart: '${DOCKERSTART}'
        hostname: drawio
        container_name: Draw.io

    cyberchef:
        image: 'mpepping/cyberchef:latest'
        ports:
            - '$CYBERCHEFPORT:8000'
        restart: '${DOCKERSTART}'
        hostname: cyberchef
        container_name: CyberChef

    regex101:
        image: 'loopsun/regex101'
        ports:
            - '$REGEX101PORT:9090'
        restart: '${DOCKERSTART}'
        hostname: regex101
        container_name: Regex101

    it-tools:
        image: 'corentinth/it-tools:latest'
        ports:
            - '$ITTOOLSPORT:80'
        restart: '${DOCKERSTART}'
        hostname: it-tools
        container_name: IT-Tools

    codimd-db:
        image: 'postgres:14-alpine'
        environment:
            - POSTGRES_DB=codimd
            - POSTGRES_USER=codimd
            - POSTGRES_PASSWORD=${ACTPASSWORD}
        volumes:
            - '${DOCPATH}/codimd/db-data:/var/lib/postgresql/data'
        restart: '${DOCKERSTART}'
        hostname: codimd-db
        container_name: Codimd-DB

    codimd:
        image: 'hackmdio/hackmd:2.5.4'
        environment:
            - CMD_DB_URL=postgres://codimd:${ACTPASSWORD}@Codimd-DB/codimd
            - CMD_USECDN=false
        volumes:
            - '${DOCPATH}/codimd/uploads:/home/hackmd/app/public/uploads'
        ports:
            - '$CODIMDPORT:3000'
        restart: '${DOCKERSTART}'
        hostname: codimd
        container_name: Codimd

    n8n:
        image: 'n8nio/n8n:latest'
        volumes:
            - '${DOCPATH}/n8n:/home/node/.n8n'
        environment:
            - 'N8N_BASIC_AUTH_PASSWORD=${ACTPASSWORD}'
            - 'N8N_BASIC_AUTH_USER=${LOGINUSER}@n8n.local'
            - N8N_SECURE_COOKIE=false
            - N8N_BASIC_AUTH_ACTIVE=true
        ports:
            - '$N8NPORT:5678'
        restart: '${DOCKERSTART}'
        hostname: n8n
        container_name: N8N

    gitlab:
        image: 'gitlab/gitlab-ce:latest'
        volumes:
            - '${DOCPATH}/gitlab/config:/etc/gitlab'
            - '${DOCPATH}/gitlab/logs:/var/log/gitlab'
            - '${DOCPATH}/gitlab/data:/var/opt/gitlab'
        ports:
            - '$GITLABPORT:80'
        restart: '${DOCKERSTART}'
        hostname: gitlab
        container_name: GitLab

    etherpad:
        image: 'etherpad/etherpad:latest'
        environment:
            - TZ=America/New_York
            - NODE_VERSION=22.8.0
            - YARN_VERSION=1.22.22
            - TIMEZONE=
            - NODE_ENV=production
            - ETHERPAD_PRODUCTION=1
        ports:
            - '$ETHERPADPORT:9001'
        restart: '${DOCKERSTART}'
        hostname: etherpad
        container_name: EtherPad

    b-b-shuffle:
        build:
            context: '${DOCPATH}/B-B-Shuffle/'
        volumes:
            - '${DOCPATH}/B-B-Shuffle/html:/var/www/html'
        ports:
            - '$BBSHUFFLEPORT:80'
        restart: '${DOCKERSTART}'
        hostname: b-b-shuffle
        container_name: B-B-Shuffle

    vscode:
        command: 'code-server --install-extension esbenp.prettier-vscode ms-python.debugpy redhat.vscode-yaml redhat.vscode-xml gitlab.gitlab-workflow vscode-icons-team.vscode-icons yzhang.markdown-all-in-one mechatroner.rainbow-csv oderwat.indent-rainbow shd101wyy.markdown-preview-enhanced grapecity.gc-excelviewer bierner.markdown-mermaid bpruitt-goddard.mermaid-markdown-syntax-highlighting'
        image: 'lscr.io/linuxserver/code-server:latest'
        environment:
            - PUID=1000
            - PGID=1000
            - TZ=Etc/UTC
            - PASSWORD=${ACTPASSWORD}
            - HASHED_PASSWORD=
            - SUDO_PASSWORD=${ACTPASSWORD}
            - SUDO_PASSWORD_HASH=
            - DEFAULT_WORKSPACE=/config/workspace
        volumes:
            - '${DOCPATH}/vscode:/config'
        ports:
            - '$VSCODEPORT:8443'
        restart: '${DOCKERSTART}'
        hostname: vscode
        container_name: VSCode