version: '3.8'

# WebApp Conversion Framework Docker Compose Configuration
# Provides complete application stack with all dependencies

services:
  # Main application backend
  webapp-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    container_name: webapp-backend
    hostname: webapp-backend
    restart: unless-stopped
    
    # Environment variables
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@webapp-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://webapp-redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost,http://localhost:3000}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-104857600}
      - UPLOAD_DIR=/app/uploads
      - DOWNLOAD_DIR=/app/downloads
      - SMB_MOUNT_BASE=/app/mounts
      
    # Port mapping
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    
    # Volume mounts
    volumes:
      - webapp-uploads:/app/uploads
      - webapp-downloads:/app/downloads
      - webapp-logs:/app/logs
      - webapp-mounts:/app/mounts
      - /etc/localtime:/etc/localtime:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      webapp-db:
        condition: service_healthy
      webapp-redis:
        condition: service_healthy
    
    # Networks
    networks:
      - webapp-network
      - webapp-db-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Frontend (Nginx serving static files)
  webapp-frontend:
    image: nginx:alpine
    container_name: webapp-frontend
    hostname: webapp-frontend
    restart: unless-stopped
    
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - webapp-logs:/var/log/nginx
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    depends_on:
      - webapp-backend
    
    networks:
      - webapp-network
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.1"

  # PostgreSQL Database
  webapp-db:
    image: postgres:15-alpine
    container_name: webapp-db
    hostname: webapp-db
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-webapp}
      - POSTGRES_USER=${POSTGRES_USER:-webapp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    
    volumes:
      - webapp-postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - /etc/localtime:/etc/localtime:ro
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-webapp_user} -d ${POSTGRES_DB:-webapp}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    networks:
      - webapp-db-network
    
    # Security: don't expose ports externally
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.3"
        reservations:
          memory: 256M

  # Redis for caching and background tasks
  webapp-redis:
    image: redis:7-alpine
    container_name: webapp-redis
    hostname: webapp-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    
    volumes:
      - webapp-redis-data:/data
      - /etc/localtime:/etc/localtime:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    
    networks:
      - webapp-db-network
    
    # Security: don't expose ports externally
    ports:
      - "127.0.0.1:6379:6379"
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.1"

  # Celery worker for background tasks
  webapp-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: webapp-worker
    hostname: webapp-worker
    restart: unless-stopped
    
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@webapp-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://webapp-redis:6379
      - SECRET_KEY=${SECRET_KEY}
    
    volumes:
      - webapp-uploads:/app/uploads
      - webapp-downloads:/app/downloads
      - webapp-logs:/app/logs
      - webapp-mounts:/app/mounts
    
    depends_on:
      webapp-db:
        condition: service_healthy
      webapp-redis:
        condition: service_healthy
    
    networks:
      - webapp-db-network
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.3"

  # Celery beat scheduler
  webapp-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: webapp-scheduler
    hostname: webapp-scheduler
    restart: unless-stopped
    
    command: celery -A celery_app beat --loglevel=info
    
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@webapp-db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://webapp-redis:6379
      - SECRET_KEY=${SECRET_KEY}
    
    volumes:
      - webapp-logs:/app/logs
    
    depends_on:
      webapp-db:
        condition: service_healthy
      webapp-redis:
        condition: service_healthy
    
    networks:
      - webapp-db-network
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.1"

  # Monitoring with Prometheus (optional)
  webapp-prometheus:
    image: prom/prometheus:latest
    container_name: webapp-prometheus
    hostname: webapp-prometheus
    restart: unless-stopped
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - webapp-prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - webapp-network
    
    profiles:
      - monitoring

  # Log aggregation with Grafana (optional)
  webapp-grafana:
    image: grafana/grafana:latest
    container_name: webapp-grafana
    hostname: webapp-grafana
    restart: unless-stopped
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - webapp-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - webapp-prometheus
    
    networks:
      - webapp-network
    
    profiles:
      - monitoring

# Named volumes
volumes:
  webapp-postgres-data:
    driver: local
  webapp-redis-data:
    driver: local
  webapp-uploads:
    driver: local
  webapp-downloads:
    driver: local
  webapp-logs:
    driver: local
  webapp-mounts:
    driver: local
  webapp-prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./monitoring/prometheus-data
  webapp-grafana-data:
    driver: local

# Networks
networks:
  webapp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  webapp-db-network:
    driver: bridge
    internal: true  # Internal network for database access
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16